module io

import (
    "monads"
    "unicode"
)

def Stream(r <- .E) |&[byte] ? E|
    match <- r
        case ok((some(r), bytes))
            return |ok(bytes), ...Stream(r)|
        case ok((none(), bytes))
            if len(bytes) == 0
                return ||
            else 
                return |ok(bytes)|
        case err(e)
            return |err(e)|

def Bytes(r <- .E) |byte ? E|
    match <- r
        case ok((some(r), bytes))
            return stream(bytes)
                then unicode.Runes()
                then map((byte) => ok(byte))
                then chain(Stream(r))
        case ok((none(), bytes))
            return stream(bytes)
                then unicode.Runes()
                then map((byte) => ok(byte))
        case err(e)
            return |err(e)|

def Runes(r <- .E) |rune ? E|  
    match <- r
        case ok((some(r), bytes))
            return stream(bytes)
                then map((byte) => ok(byte))
                then chain(Stream(r))
        case ok((none(), bytes))
            return stream(bytes)
                then map((byte) => ok(byte))
        case err(e)
            return |err(e)|

type CopyError[R <- .E1, W .E2 <-] union 
    FailedRead (W, E1)
    FailedWrite (maybe[R], E2)

def readTo(r R <- .E1, w W .E2 <-, bound maybe[int]) (maybe[R], W) ? CopyError
    r, b = try <-(bound) r wrap e with CopyError.FailedRead((w, e))
    w = try w <- b wrap e with CopyError.FailedWrite((r, e))
    return ok((r, w))

def Copy(r reader[.E1], w W writer[.E2]) W ? CopyError
    r, w = try readTo(r, w, none())
    if r is some(r)
        return Copy(r, w)
    else 
        return ok(w)

def CopyAtMost(r reader[.E1], w W writer[.E2], n int) (maybe[R], W) ? CopyError
    

type CopyError[R reader[.E1], W writer[.E2]] union 
    FailedRead (W, E1)
    FailedWrite (maybe[R], E2)
    