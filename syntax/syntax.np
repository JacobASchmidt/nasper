module syntax 

import (
    module1
    module2
)

type foo struct 
    member memberType

type bar union 
    member memberType 

type foobar int

type foobar () #empty tuple

type foobar str 

type generic[A] struct 
    member A

type List[A] union 
    Empty ()
    More  (A, 'List[A]) #'A denotes box<A> or unique_ptr<A>, just a heap allocated A that destroys in "destructor"

# types 
# list is [A]; 
# set is {A}; 
# dict from A to B is {A: B}; 
# tuple is (A, B); 
# str; 
# A ? E #is result[A, E] is union{ok A, err E}
# A?? is maybe[A] is union{some a, none ()}
# 'A is a boxed (heap allocated) A, linearly typed
# *A is a frozen A, like an atomic shared ptr to a const val
# .A declares a new type parameter in a function, and is not a type modifier itself, look below in the defs for further explanation
# classes
# () => (); (int, string) => float; &(int, string) => ; etc; |A|; &|A|;

#the reference thing
# just means cant be linearly consumed: &A means you can only do operations that arent linearly consumed


def Func(arg type1, arg2 type2) returntype
    if true
        a = foo{.member = memberType{}}
        b = bar.member(memberType{})
    match List.Empty(())
        case List.Empty(_)
            return returntype{}
        case List.More(first, 'rest)
            return returntype{}
def Func2[A, B ClassRestraint](arg A, argb B) A
#equiv to 
def Func2(arg .A, argb .B ClassRestraint) A 
# might not want to worry about that for now

def Func3(w .W ClassRestraint[.Error]) W ? E


#some cool stuff
def count(vals |int|)
    return update d = {} to d{val: 1 : (cnt) => cnt + 1} for val in vals

def groupBy(vals |.A|, f &(&A) => .B) {B: A}
    return update d = {} to d{f(val): [val] : (vals) => [...vals, val]} for val in vals

